{"version":3,"sources":["App.js","index.js"],"names":["App","state_posible_to_system","names_button_Pesquisar","useState","city","setCity","weatherForecast","setWeatherForecast","current_state_system","set_Current_State","handleSearch","fetch","then","res","status","json","alert","data","className","href","id","class","type","value","onChange","e","target","onClick","src","current","condition","icon","alt","location","name","region","country","lat","lon","text","temp_c","temp_f","last_updated","humidity","wind_kph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAkJeA,MA9If,WAEE,IAGMC,EAEQ,EAFRA,EAGM,EAHNA,EAIQ,EAJRA,EAKG,EAGHC,EAEQ,YAFRA,EAGQ,kBAGd,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8CF,mBAAS,MAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkDJ,mBAASF,GAA3D,mBAAOO,EAAP,KAA6BC,EAA7B,KAQMC,EAAe,WAEnBC,MAAM,GAAD,OA5BkB,gCA4BlB,4BA7Ba,kCA6Bb,cACyDP,EADzD,aAGFQ,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OAIN,OAFAT,EAAQ,IACRI,EAAkBR,GACXY,EAAIE,OAEW,MAAfF,EAAIC,QAEXL,EAAkBR,GAClBe,MAAM,6BAEgB,MAAfH,EAAIC,SAEXL,EAAkBR,GAClBe,MAAM,+BAGTJ,MAAK,SAACK,GAELV,EAAmBU,OAIzB,OACE,qCACE,8BACE,qBAAKC,UAAU,mDAAf,SACE,mBAAGA,UAAU,eAAeC,KAAK,UAAjC,qCAMJ,uBAAMD,UAAU,YAAYE,GAAG,SAA/B,UACE,sBAAKF,UAAU,YAAf,UACE,qFACA,mBAAGA,UAAU,OAAb,uGAIA,qBAAKA,UAAU,WAAf,SACE,qBAAKG,MAAM,WAAX,SACE,uBACEC,KAAK,OACLD,MAAM,eACNE,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAAQoB,EAAEC,OAAOH,cAIxC,wBAAQL,UAAU,yBAAyBS,QA9DxB,WAEzBlB,EAAkBR,GAClBS,KA2DM,SAEIF,IAAyBP,EACrBC,EAEFA,IAKLI,EACC,mCACE,sBAAKY,UAAU,iCAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBACEU,IAAG,UAAKtB,EAAgBuB,QAAQC,UAAUC,MAC1CC,IAAI,mBAGR,gCACE,2CACc1B,EAAgB2B,SAASC,KADvC,MACgD5B,EAAgB2B,SAASE,OADzE,MACoF7B,EAAgB2B,SAASG,WAE7G,4CACa9B,EAAgB2B,SAASI,IADtC,gBACwD/B,EAAgB2B,SAASK,OAEjF,sDACoBhC,EAAgBuB,QAAQC,UAAUS,QAEtD,oBAAGrB,UAAU,OAAb,0BACgBZ,EAAgBuB,QAAQW,OADxC,MACmDlC,EAAgBuB,QAAQY,OAD3E,aAGA,gEACyBnC,EAAgBuB,QAAQa,gBAEjD,mDACqBpC,EAAgBuB,QAAQc,SAD7C,OAGA,sDACwBrC,EAAgBuB,QAAQe,SADhD,mBAMJ,QAEN,8BACE,+ECpIVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.475abbb8.chunk.js","sourcesContent":["import { useState } from 'react';\n\n//https://www.weatherapi.com/api-explorer.aspx#astronomy origem da API\n\nfunction App() \n{\n  const REACT_APP_KEY=\"e751ea9cf5bc4fcbbb3225428211810\";\n  const REACT_APP_BASE_URL=\"http://api.weatherapi.com/v1/\";\n  \n  const state_posible_to_system =\n  {\n    STANDY_BY : 1,\n    LOADING : 2,\n    DELIVERED : 3,\n    ERRO : 4\n  };\n\n  const names_button_Pesquisar =\n  {\n    STANDY_BY : \"Pesquisar\",\n    LOADING   : \"Pesquisando ...\",\n  };\n\n  const [city, setCity] = useState(\"\");\n  const [weatherForecast, setWeatherForecast] = useState(null);\n  const [current_state_system, set_Current_State] = useState(state_posible_to_system.STANDY_BY);\n\n  const call_get_city_info = () => \n  {\n    set_Current_State(state_posible_to_system.LOADING);\n    handleSearch();\n  }\n\n  const handleSearch = () => {\n\n    fetch(\n      `${REACT_APP_BASE_URL}current.json?key=${REACT_APP_KEY}&q=${city}&lang=pt`\n    )\n      .then((res) => {\n        if (res.status === 200) \n        {\n          setCity(\"\");\n          set_Current_State(state_posible_to_system.DELIVERED);\n          return res.json();\n        }\n        else if (res.status === 400)\n        {\n          set_Current_State(state_posible_to_system.ERRO);\n          alert(\"Cidade não encontrada\");\n        }\n        else if (res.status === 401)\n        {\n          set_Current_State(state_posible_to_system.ERRO);\n          alert(\"Acesso a API desativada\");\n        }\n      })\n      .then((data) => {\n        //console.log(data);\n        setWeatherForecast(data);\n      })\n  };\n\n  return (\n    <>\n      <div>\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n          <a className=\"navbar-brand\" href=\"#search\">\n            Tempo na sua cidade\n          </a>\n        </nav>\n      </div>\n\n      <main className=\"container\" id=\"search\">\n        <div className=\"jumbotron\">\n          <h1>Verique agora a previsão do tempo na sua cidade!</h1>\n          <p className=\"lead\">\n            Digite da sua cidade no campo abaixo o nome da sua cidade em seguida\n            clique em pesquisar.\n          </p>\n          <div className=\"row mb-4\">\n            <div class=\"col-md-6\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n              />\n            </div>\n          </div>\n          <button className=\"btn btn-lg btn-primary\" onClick={call_get_city_info}>\n            {\n              current_state_system === state_posible_to_system.LOADING ? (\n                  names_button_Pesquisar.LOADING\n              ) : (\n                names_button_Pesquisar.STANDY_BY\n              )\n            }\n          </button>\n\n          {weatherForecast ? (\n            <>\n              <div className=\"mt-4 d-flex align-items-center\">\n                <div className=\"col-sm-1\">\n                  <img\n                    src={`${weatherForecast.current.condition.icon}`}\n                    alt=\"Weather Icon\"\n                  />\n                </div>\n                <div>\n                  <h2>\n                      Clima em {weatherForecast.location.name} - {weatherForecast.location.region} - {weatherForecast.location.country}\n                  </h2>\n                  <h5>\n                    Latitude: {weatherForecast.location.lat}, Longitude: {weatherForecast.location.lon}\n                  </h5>\n                  <h3>\n                    Hoje o dia está: {weatherForecast.current.condition.text}\n                  </h3>\n                  <p className=\"lead\">\n                    Temperatura: {weatherForecast.current.temp_c} / {weatherForecast.current.temp_f} &#8451;\n                  </p>\n                  <p>\n                    Última atualização em {weatherForecast.current.last_updated}\n                  </p>\n                  <p>\n                    Umidade relativa: {weatherForecast.current.humidity}%\n                  </p>\n                  <p>\n                    Velocidade do vento: {weatherForecast.current.wind_kph} km/h\n                  </p>\n                </div>\n              </div>\n            </>\n          ) : null}\n        </div>\n        <div>\n          <footer>\n            Desenvolvido por Lucas Dallamico\n          </footer>\n        </div>\n\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}